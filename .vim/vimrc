"" Source vimrc automatically
autocmd! bufwritepost ~/.vim/vimrc source %


" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>


" map sort function to a key
vnoremap <Leader>s :sort<CR>


" Show whitespace
" MUST be inserted BEFORE the colorscheme command
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/


" Split to the right and bottom
set splitright
set splitbelow


" Enable syntax highlighting
filetype off
filetype plugin indent on
syntax on


" Showing line numbers and length
set number  " show line numbers
set scrolloff=10 " center cursor vertically
set tw=79   " width of document (used by gd)
set nowrap  " don't automatically wrap on load
set fo-=t   " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=233


" Useful settings
set history=700
set undolevels=700


" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab


" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase


"" This is the source of spell being broken
"" Configuration specific to .tex files 
augroup latex_ft
  au!
  autocmd BufNewFile,BufRead *.tex   set wrap linebreak nolist
  set spelllang=en
  set spell
  let g:Tex_MultipleCompileFormats = 'pdf'
augroup END

set nospell
autocmd BufEnter *.tex set spell
autocmd BufLeave *.tex set nospell

tnoremap <Esc> <C-\><C-n>
" Press ESC twice to stop highlighting after search
nnoremap <esc><esc> :noh<return>


"" Use Ctrl + hjkl to move around the windows
map <C-k> <C-w>k
map <C-l> <C-w>l
map <C-h> <C-w>h
"" vim-latex remaps <C-j> to something else. This trick executes after the
"" plugins are loaded so it doesn't get overriden
augroup vimrc
    au!
    au VimEnter * unmap <C-j>
    au VimEnter * noremap <C-j> <C-w>j
augroup END


" Better indentation
vnoremap < <gv
vnoremap > >gv


call plug#begin('~/.vim/plugged')

"Plug 'stevearc/vim-arduino'
" Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary' " There must be an issue with key bindings for this
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'davidhalter/jedi-vim'
Plug 'kien/ctrlp.vim' " Fuzzy search
"Plug 'Vigemus/nvimux'
Plug 'vim-latex/vim-latex'
Plug 'Badacadabra/vim-archery'
Plug 'nightsense/cosmic_latte'

call plug#end()

" toggle comment
map C gcc

" Color scheme
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
set t_Co=256
"colorscheme archery
colorscheme cosmic_latte

" let g:airline_theme = 'cosmic_latte_dark'


" ============================================================================
" Python IDE Setup
" ============================================================================


" vim-powerline
set laststatus=2


" Settings for ctrlp
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*


" Settings for jedi-vim
" cd ~/.vim/bundle
" git clone git://github.com/davidhalter/jedi-vim.git
let g:jedi#usages_command = "<leader>z"
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>


" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction


inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>


" Python folding
" mkdir -p ~/.vim/ftplugin
" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
set nofoldenable
